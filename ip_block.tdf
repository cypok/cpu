% INSTRUCTION POINTER %

subdesign ip_block
(
    addrIn[7..0] : input;
    addrOut[7..0] : output;
    inc : input; % increment IP %
    load : input; % load addIn to IP (more important than inc) %
    clk : input;
)

variable
    reg[7..0] : dff;
    carr[6..0] : node;

begin
    reg[].(clrn, prn, clk) = (VCC, VCC, clk);

    carr[0] =    reg[0].q;
    carr[6..1] = reg[6..1].q & carr[5..0];

    reg[0].d =    load & addrIn[0]    # !load & inc & !reg[0].q;
    reg[7..1].d = load & addrIn[7..1] # !load & inc & (reg[7..1].q $ carr[6..0]);

    addrOut[] = reg[].q;
end;
