constant IC_NOP = h"00";
constant IC_HLT = h"ff";

subdesign cu_block
(
    clk : input;
    ar[7..0] : input;
    icr[7..0] : input;

    ip_mode : output;
    ip_ena : output;
    ip_abus_ena : output;

    mem_write : output;
    mem_dbus_ena : output;

    ir_ena : output;

    halted, error : output;
)

variable
    fsm : machine
        with states (   
                        start,
                        setting_mem_addr,
                        getting_mem_data,
                        processing,
                        changing_ip,
                        halted,
                        error
                    );

begin
    defaults
        ip_mode = GND;
        ip_ena = GND;
        ip_abus_ena = GND;

        mem_write = GND;
        mem_dbus_ena = GND;

        ir_ena = GND;

        halted = GND;
        error = GND;
    end defaults;

    fsm.(reset, ena, clk) = (GND, VCC, clk);

    case fsm is
        when start =>               fsm = setting_mem_addr;
            ip_abus_ena = VCC;

        when setting_mem_addr =>    fsm = getting_mem_data;

        when getting_mem_data =>    fsm = processing;
            mem_dbus_ena = VCC;
            ir_ena = VCC;

        when processing =>
            case icr[] is
                when IC_NOP =>      fsm = changing_ip;
                when IC_HLT =>      fsm = halted;
                when others =>      fsm = error;
            end case;
            
            ip_mode = GND;
            ip_ena = VCC;

        when changing_ip =>         fsm = setting_mem_addr;
            ip_abus_ena = VCC;

        when halted =>              fsm = halted;
            halted = VCC;

        when error =>               fsm = error;
            error = VCC;

    end case;
end;
