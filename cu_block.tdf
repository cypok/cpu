constant IC_NOP = h"00"; -- 
constant IC_HLT = h"ff"; -- halted = VCC
constant IC_LDA = h"10"; -- Ar = mem[ir.addr]
constant IC_STA = h"20"; -- mem[ir.addr] = Ar
constant IC_JMP = h"30"; -- ip = ir.addr
constant IC_JOV = h"31"; --     if OF == 1
constant IC_JNOV= h"32"; --     if OF == 0
constant IC_ADD = h"40"; -- Ar += mem[ir.addr]
constant IC_SUB = h"41"; -- Ar -= mem[ir.addr]
constant IC_MUL = h"42"; -- Ar *= mem[ir.addr]
constant IC_DIV = h"43"; -- Ar /= mem[ir.addr]
constant IC_AND = h"44"; -- Ar &= mem[ir.addr]
constant IC_OR  = h"45"; -- Ar #= mem[ir.addr]
constant IC_SLA = h"46"; -- Ar <<= ir.addr
constant IC_SRA = h"47"; -- Ar >>= ir.addr

subdesign cu_block
(
    clk : input;
    icr[7..0] : input;
    of_state : input;

    ip_mode : output;
    ip_ena : output;
    ip_abus_ena : output;

    mem_write : output;
    mem_dbus_ena : output;

    ir_ena : output;
    ir_abus_ena : output;
    
    ar_ena : output;
    ar_dbus_ena : output;

    au_mode[3..0] : output;
    au_ena_in : output;
    au_ena_out : output;
    au_of_reset : output;
    au_dbus_ena : output;

    halted, error : output;
)

variable
    fsm : machine
        with states (   
                        start,
                        setting_mem_addr,
                        getting_mem_data,
                        processing,
                        changing_ip,

                        halted,
                        error,

                        lda_setting_mem_addr,
                        lda_getting_mem_data,

                        sta_writing,

                        au_setting_mem_addr,
                        au_getting_mem_data,
                        au_working
                    );

begin
    defaults
        ip_mode = GND;
        ip_ena = GND;
        ip_abus_ena = GND;

        mem_write = GND;
        mem_dbus_ena = GND;

        ir_ena = GND;
        ir_abus_ena = GND;

        ar_ena = GND;
        ar_dbus_ena = GND;

        au_ena_in = GND;
        au_ena_out = GND;
        au_mode[] = GND;
        au_of_reset = GND;
        au_dbus_ena = GND;

        halted = GND;
        error = GND;
    end defaults;

    fsm.(reset, ena, clk) = (GND, VCC, clk);

    case fsm is
        when start =>               fsm = setting_mem_addr;
            ip_abus_ena = VCC;

        when setting_mem_addr =>    fsm = getting_mem_data;

        when getting_mem_data =>    fsm = processing;
            mem_dbus_ena = VCC;
            ir_ena = VCC;

        when changing_ip =>         fsm = setting_mem_addr;
            ip_abus_ena = VCC;

        when halted =>              fsm = halted;
            halted = VCC;

        when error =>               fsm = error;
            error = VCC;

        when processing =>
            case icr[] is
                when IC_NOP =>          fsm = changing_ip;
                    ip_mode = GND; -- increment ip
                    ip_ena = VCC;

                when IC_HLT =>          fsm = halted;

                when IC_LDA =>          fsm = lda_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_STA =>          fsm = sta_writing;
                    ar_dbus_ena = VCC;
                    ir_abus_ena = VCC;
                    mem_write = VCC;

                when IC_JMP =>          fsm = changing_ip;
                    ir_abus_ena = VCC;
                    ip_mode = VCC;
                    ip_ena = VCC;

                when IC_JOV =>          fsm = changing_ip;
                    ir_abus_ena = of_state;
                    ip_mode = of_state;
                    au_of_reset = VCC;
                    ip_ena = VCC;

                when IC_JNOV =>         fsm = changing_ip;
                    ir_abus_ena = !of_state;
                    ip_mode = !of_state;
                    au_of_reset = VCC;
                    ip_ena = VCC;

                when IC_ADD =>          fsm = au_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_SUB =>          fsm = au_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_MUL =>          fsm = au_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_DIV =>          fsm = au_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_AND =>          fsm = au_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_OR =>           fsm = au_setting_mem_addr;
                    ir_abus_ena = VCC;

                when IC_SLA =>          fsm = au_getting_mem_data;

                when IC_SRA =>          fsm = au_getting_mem_data;


                when others =>          fsm = error;

            end case;


        % L D A %
        when lda_setting_mem_addr => fsm = lda_getting_mem_data;
        when lda_getting_mem_data => fsm = changing_ip;
            mem_dbus_ena = VCC; -- read data
            ar_ena = VCC; -- write it to Ar

            ip_mode = GND; -- increment ip
            ip_ena = VCC;

        % STA %
        when sta_writing =>         fsm = changing_ip;
            ip_mode = GND;
            ip_ena = VCC;

        % AU %
        when au_setting_mem_addr => fsm = au_getting_mem_data;
        when au_getting_mem_data => fsm = au_working;
            mem_dbus_ena = VCC; -- is unused if ICR == SLA or SRA

            au_ena_in = VCC;
            au_mode[] = icr[3..0];

        when au_working          => fsm = changing_ip;
            au_ena_out = VCC;
            au_mode[] = icr[3..0];

            au_dbus_ena = VCC;
            ar_ena = VCC;

            ip_mode = GND;
            ip_ena = VCC;

    end case;
end;
