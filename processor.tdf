include "mem_block.inc";
include "ip_block.inc";
include "cu_block.inc";
include "au_block.inc";

subdesign processor
(
    clk : input;

    databus[15..0] : output;
    addrbus[7..0] : output;
    instrreg[15..0] : output;

    halted, error : output;
    of_state : output;
    areg[15..0] : output;
)

variable
    mem : mem_block;
    ip : ip_block;
    cu : cu_block;
    au : au_block;

    dbus[15..0] : tri_state_node;
    abus[7..0] : tri_state_node;

    ir[15..0] : dffe;
    ar[15..0] : dffe;

begin
    (mem, ip, cu, au).clk = clk;

    (halted, error) = cu.(halted, error);

    mem.addr[] = abus[];
    mem.dataIn[] = dbus[];
    mem.write = cu.mem_write;
    
    ip.addrIn[] = abus[];
    ip.mode = cu.ip_mode;
    ip.ena = cu.ip_ena;

    ir[].(clrn, prn, clk) = (VCC, VCC, clk);
    ir[].ena = cu.ir_ena;
    ir[].d = dbus[15..0];

    cu.icr[] = ir[7..0].q;

    ar[].(clrn, prn, clk) = (VCC, VCC, clk);
    ar[].ena = cu.ar_ena;
    ar[].d = dbus[15..0];

    au.mode[] = cu.au_mode[];
    au.ena_in = cu.au_ena_in;
    au.ena_out = cu.au_ena_out;
    au.reset = cu.au_of_reset;
    au.in1[] = ar[].q;
    au.in2[] = dbus[];
    au.in3[] = ir[15..8].q;

    cu.of_state = au.of_state;
    of_state = au.of_state;

    for i in 0 to 15 generate
        dbus[i] = tri( mem.dataOut[i], cu.mem_dbus_ena );
        dbus[i] = tri( ar[i].q, cu.ar_dbus_ena );
        dbus[i] = tri( au.out[i], cu.au_dbus_ena );
        dbus[i] = tri( VCC, !(cu.mem_dbus_ena # cu.ar_dbus_ena # cu.au_dbus_ena) );
    end generate;

    for i in 0 to 7 generate
        abus[i] = tri( ip.addrOut[i], cu.ip_abus_ena );
        abus[i] = tri( ir[8+i].q, cu.ir_abus_ena ); -- abus[7..0] = ir[15..8]
        abus[i] = tri( VCC, !(cu.ip_abus_ena # cu.ir_abus_ena) );
    end generate;

    addrbus[] = abus[];
    databus[] = dbus[];
    instrreg[] = ir[];
    areg[] = ar[];
end;
